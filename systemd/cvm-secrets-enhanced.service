[Unit]
Description=Enhanced cVM Secret Injection with Reboot Safety
After=network-online.target
Wants=network-online.target
Before=cvm-storage.service

[Service]
Type=oneshot
RemainAfterExit=yes
Environment=VAULT_ADDR=https://vhsm.enclaive.cloud/
ExecStartPre=/usr/local/bin/vault-token-persistence.sh
ExecStart=/bin/bash -c '\
    set -e; \
    echo "Starting enhanced cVM secret injection..."; \
    \
    # Verify VAULT access first \
    if ! vault token lookup >/dev/null 2>&1; then \
        echo "❌ VAULT authentication failed - manual intervention required"; \
        echo "Run: vault login -address https://vhsm.enclaive.cloud/"; \
        exit 1; \
    fi; \
    \
    # Create secrets directory \
    mkdir -p /run/cvm-secrets; \
    chmod 700 /run/cvm-secrets; \
    \
    HOSTNAME=$(hostname); \
    \
    # Get node info with retry logic and FIXED jq syntax \
    NODE_ROLE="unknown"; \
    for i in {1..3}; do \
        NODE_INFO=$(vault read -namespace=team-msc -format=json cubbyhole/cluster-nodes/$HOSTNAME 2>/dev/null || echo "{}"); \
        \
        # FIXED: Use safer jq syntax without // operator \
        if echo "$NODE_INFO" | jq -e ".data" >/dev/null 2>&1; then \
            if echo "$NODE_INFO" | jq -e ".data.role" >/dev/null 2>&1; then \
                NODE_ROLE=$(echo "$NODE_INFO" | jq -r ".data.role"); \
                break; \
            fi; \
        fi; \
        \
        echo "Retry $i/3 for node info..."; \
        sleep 2; \
    done; \
    \
    echo "Node role: $NODE_ROLE"; \
    \
    if [ "$NODE_ROLE" = "unknown" ]; then \
        echo "❌ Node not registered! Run vhsm-cvm-auth-enhanced.sh first"; \
        exit 1; \
    fi; \
    \
    # Get secrets with error handling \
    vault read -namespace=team-msc -field=key cubbyhole/cvm-cluster/$HOSTNAME-luks > /run/cvm-secrets/luks.key || { echo "❌ Failed to get LUKS key"; exit 1; }; \
    vault read -namespace=team-msc -field=private_key cubbyhole/cvm-cluster/$HOSTNAME-wireguard > /run/cvm-secrets/wg.key || { echo "❌ Failed to get WG key"; exit 1; }; \
    \
    # Get role-specific secrets \
    if [ "$NODE_ROLE" = "worker" ]; then \
        vault read -namespace=team-msc -field=master_ip cubbyhole/cvm-cluster/$HOSTNAME-kubernetes > /run/cvm-secrets/master.ip 2>/dev/null || echo "unknown" > /run/cvm-secrets/master.ip; \
    fi; \
    \
    # Get shared cluster secrets (with fallback) \
    vault read -namespace=team-msc -field=superuser_password cubbyhole/cluster-shared/cnpg > /run/cvm-secrets/postgres-superuser.password 2>/dev/null || echo "none" > /run/cvm-secrets/postgres-superuser.password; \
    vault read -namespace=team-msc -field=cluster_encryption_key cubbyhole/cluster-shared/postgresql-encryption > /run/cvm-secrets/postgres-encryption.key 2>/dev/null || echo "none" > /run/cvm-secrets/postgres-encryption.key; \
    \
    # Store node role and boot status \
    echo "$NODE_ROLE" > /run/cvm-secrets/node.role; \
    echo "$(date -u +%Y-%m-%dT%H:%M:%SZ)" > /run/cvm-secrets/last.boot; \
    \
    chmod 600 /run/cvm-secrets/*; \
    \
    echo "✅ Enhanced cVM secrets injected successfully for $NODE_ROLE node"'

ExecStop=/bin/bash -c '\
    if [ -d /run/cvm-secrets ]; then \
        shred -vfz -n 3 /run/cvm-secrets/* 2>/dev/null || true; \
        rm -rf /run/cvm-secrets; \
    fi'

Restart=on-failure
RestartSec=30

[Install]
WantedBy=multi-user.target
